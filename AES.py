# Tabela de substituição S-Box para o AES
sbox = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
]

# Tabela de substituição inversa InvS-Box para o AES
inv_sbox = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)


# Função para criptografar uma mensagem usando o AES
def cifra(msg, key):
    cypher = []
    while len(msg) > 16:
        bloco = msg[:16]
        msg = msg[16:]
        aes(bloco, key)
        cypher += bloco

    # Preenche com zeros se o último bloco não tiver 16 bytes
    bloco = msg + [0] * (16 - len(msg))
    aes(bloco, key)
    cypher += bloco
    return cypher

# Função para descriptografar uma mensagem usando o AES
def decifra(cypher, key):
    msg = []
    while len(cypher) >= 16:
        bloco = cypher[:16]
        cypher = cypher[16:]
        inverte_aes(bloco, key)
        msg += bloco
    return msg


# Função que realiza a cifra do AES em um bloco de dados
def aes(bloco, key):
    # Expande a chave
    expandedKey = expandKey(key)

    # Adiciona a chave da rodada inicial
    addRoundKey(bloco, expandedKey[:16])

    # Realiza 9 rodadas de transformações
    for i in range(9):
        subBytes(bloco) # Substituição de bytes
        shiftRows(bloco) # Deslocamento de linhas
        mixColumns(bloco)  # Mistura de colunas
        addRoundKey(bloco, expandedKey[(i + 1) * 16:(i + 2) * 16])  # Adição da chave da rodada

    # Última rodada
    subBytes(bloco)
    shiftRows(bloco)
    addRoundKey(bloco, expandedKey[160:])


# Função que realiza a decifra do AES em um bloco de dados
def inverte_aes(bloco, key):
    expandedKey = expandKey(key)
    addRoundKey(bloco, expandedKey[160:])
    revertShiftRows(bloco)
    revertSubBytes(bloco)
    for i in range(9):
        addRoundKey(bloco, expandedKey[(9 - i) * 16:(10 - i) * 16])
        revertMixColumns(bloco)
        revertShiftRows(bloco)
        revertSubBytes(bloco)
    addRoundKey(bloco, expandedKey[:16])

# Função para reverter a substituição de bytes
def revertSubBytes(bloco):
    for i in range(16):
        bloco[i] = inv_sbox[bloco[i]]


# Função para reverter a adição da chave da rodada (XOR)
def revertRoundKey(bloco, key):
    for i in range(16):
        bloco[i] = bloco[i] ^ key[i]


# Função para realizar a substituição de bytes
def subBytes(bloco):
    for i in range(16):
        bloco[i] = sbox[bloco[i]]


# Função para adicionar a chave da rodada (XOR)
def addRoundKey(bloco, key):
    for i in range(16):
        bloco[i] = bloco[i] ^ key[i]


# Função para reverter o deslocamento de linhas
def revertShiftRows(bloco):
    bloco[4:8] = bloco[7:8] + bloco[4:7]
    bloco[8:12] = bloco[10:12] + bloco[8:10]
    bloco[12:16] = bloco[13:16] + bloco[12:13]


# Função para realizar o deslocamento de linhas
def shiftRows(bloco):
    bloco[4:8] = bloco[5:8] + bloco[4:5]
    bloco[8:12] = bloco[10:12] + bloco[8:10]
    bloco[12:16] = bloco[15:16] + bloco[12:15]


# Tabela de constantes para o AES
rcon = [
    0x01, 0x02, 0x04, 0x08, 0x10,
    0x20, 0x40, 0x80, 0x1B, 0x36,
]


# Função para expandir a chave
def expandKey(key):
    expandedKey = [0] * 176
    for i in range(16):
        expandedKey[i] = key[i]
    for i in range(16, 176, 4):
        temp = expandedKey[i-4:i]
        if i % 16 == 0:
            temp = [temp[1], temp[2], temp[3], temp[0]]
            for j in range(4):
                temp[j] = sbox[temp[j]]
            temp[0] = temp[0] ^ rcon[i//16 - 1]
        for j in range(4):
            expandedKey[i+j] = expandedKey[i+j-16] ^ temp[j]
    return expandedKey


# (Funções auxiliares para mistura de colunas, substituição inversa, etc.)
#=======================================================================#
def mul2(b):  
    if b < 128:
        return b << 1
    else:
        return (b << 1 ^ 0x1b) % 256


def mul3(b):
    return mul2(b) ^ b


def mixColumns(bloco):
    for i in range(4):
        a = bloco[i]
        b = bloco[i+4]
        c = bloco[i+8]
        d = bloco[i+12]
        bloco[i] = (mul2(a) ^ mul3(b) ^ c ^ d)
        bloco[i+4] = (a ^ mul2(b) ^ mul3(c) ^ d)
        bloco[i+8] = (a ^ b ^ mul2(c) ^ mul3(d))
        bloco[i+12] = (mul3(a) ^ b ^ c ^ mul2(d))


def mul9(b):
    return mul2(mul2(mul2(b))) ^ b  


def mul11(b):
    return mul2(mul2(mul2(b))) ^ mul2(b) ^ b  


def mul13(b):
    return mul2(mul2(mul2(b))) ^ mul2(mul2(b)) ^ b  


def mul14(b):
    return mul2(mul2(mul2(b))) ^ mul2(mul2(b)) ^ mul2(b) 


def revertMixColumns(bloco): 
    for i in range(4):
        a = bloco[i]
        b = bloco[i+4]
        c = bloco[i+8]
        d = bloco[i+12]
        bloco[i] = (mul14(a) ^ mul11(b) ^ mul13(c) ^ mul9(d))
        bloco[i+4] = (mul9(a) ^ mul14(b) ^ mul11(c) ^ mul13(d))
        bloco[i+8] = (mul13(a) ^ mul9(b) ^ mul14(c) ^ mul11(d))
        bloco[i+12] = (mul11(a) ^ mul13(b) ^ mul9(c) ^ mul14(d))

#=======================================================================# 

# Função para imprimir os bytes como caractere
def printBytes(byte_list):
    for char in byte_list:
        print(chr(char), end='')
    print()


# Chave de exemplo (128 bits)
key = [0xaa, 0xff, 0x88, 0x24, 0x19, 0xcd, 0xfa, 0x01, 0x33, 0x03, 0xca, 0xcc, 0x12, 0xdc, 0x99, 0xda]

# Mensagem de exemplo
testMsg = "Mensagem de teste"
byte_list = bytearray(testMsg, 'utf-8')
byte_list = [x for x in byte_list]

# Imprime a mensagem original
print("Mensagem original: ", end="")
printBytes(byte_list)

# Criptografa a mensagem
cypher = cifra(byte_list, key)

# Imprime a mensagem criptografada
print("Mensagem cifrada: ", end="")
printBytes(cypher)

# Descriptografa a mensagem
decryptedMsg = decifra(cypher, key)

# Imprime a mensagem descriptografada
print("Mensagem decifrada: ", end="")
printBytes(decryptedMsg)
